# -*- coding: utf-8 -*-
"""Edadil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MUKNqUnPLK7W8Jko3Wpp9NaKUS4jY6MS
"""

# -*- coding: utf-8 -*-
"""Edadil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MUKNqUnPLK7W8Jko3Wpp9NaKUS4jY6MS
"""
import datetime


# !pip install selenium
# !apt-get update # to update ubuntu to correctly run apt install
# !apt install chromium-chromedriver
# !cp /usr/lib/chromium-browser/chromedriver /usr/bin
# import sys
# sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
# from selenium.webdriver import ActionChains
import pandas as pd
# import until as until
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
import time

# !pip install --upgrade google-api-python-client
from google.oauth2 import service_account
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload
from googleapiclient.discovery import build
import pprint
import io

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--start-fullscreen')

chrome_options.add_argument('--no-sandbox')
# chrome_options.add_argument('--incognito')
# chrome_options.add_argument("--disable-images")
chrome_options.add_argument("--disable-popup-blocking")
chrome_options.add_argument('--disable-dev-shm-usage')
chrome_options.add_argument(
    'user-agent="Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"')
# chrome_options.add_argument('--parent-window')
wd = webdriver.Chrome('C:\install\chromedriver.exe', chrome_options=chrome_options) #C:\install\chromedriver.exe
ros = webdriver.Chrome('C:\install\chromedriver.exe', chrome_options=chrome_options)
wd.set_window_size(1920, 1080)
wd.get("https://edadeal.ru/")
ros.set_window_size(1920, 1080)
ros.get("https://rskrf.ru/search/")


def search_ros(search):
    search_button = WebDriverWait(ros, 20).until(EC.presence_of_element_located((By.ID, "top-search-input")))
    search_button.send_keys(Keys.CONTROL + "a")
    search_button.send_keys(Keys.BACKSPACE)
    time.sleep(0.2)
    search_button.send_keys(search, Keys.ENTER)
    one_element = ros.find_elements_by_css_selector(".product-row.row div.search-good-item .card .card-img-wrapper a")
    if len(one_element) == 1:
        link = one_element[0].get_attribute("href")
        rate_price = ros.find_element_by_class_name("card-info").text
        rate = rate_price.split('\n')[0]
        if len(rate_price.split('\n')) > 1:
          price = rate_price.split('\n')[1]
        else:
          price = None
        try:
            # name = WebDriverWait(wd, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ".h5.card-title.with-text a span")))
            name = ros.find_element_by_css_selector(".h5.card-title.with-text a span")
        except Exception:
            name = ros.find_element_by_css_selector('.item-section .product-row .card-body .h5.card-title')
        name = name.text
    else:
        name, rate, price, link = None, None, None, None

    return [name, rate, price, link]


def set_city(city):
    element = WebDriverWait(wd, 20).until(EC.presence_of_element_located((By.CLASS_NAME, "b-root__modal")))
    element.find_elements_by_class_name("b-button__content")[1].click()

    wd.find_element_by_class_name("b-root__location-suggest-input").send_keys(city)
    wd.implicitly_wait(1)
    cl_city = wd.find_elements_by_class_name("b-root__location-name")
    if len(cl_city) > 1:
        cl_city[1].click()
    else:
        cl_city[0].click()

def process_price(prices):
    prices = prices[0].split('\n')
    return prices

def search_edadil(product):
    search_el = wd.find_element_by_class_name("b-header__search-input")
    search_el.send_keys(Keys.CONTROL + "a")
    search_el.send_keys(Keys.BACKSPACE)
    time.sleep(0.2)
    search_el.send_keys(product, Keys.ENTER)

    all = wd.find_elements_by_css_selector(".p-offers__offers a")

    shop_list, price_low, price_high, name_list = [], [], [], []
    discount_list, dates_end_list, quantity_list, links_list = [], [], [], []
    rateros_list, priceros_list, nameros_list, linkros_list =[], [], [], []

    for el in all:
        discount = None
        try:
            shop = el.find_element_by_css_selector(".b-offer__dates div").get_attribute("title")
            name = el.find_element_by_class_name("b-offer__description").text
            price = [i.text for i in el.find_elements_by_class_name("b-offer__prices")]
            discount = el.find_element_by_class_name("b-offer__badge").text
            
        except Exception as ex:
            print(ex)
        try:
            dates_end = el.find_element_by_class_name("b-offer__dates").text
        except Exception as ex:
            dates_end = None
        try:
            links = el.get_attribute("href")
        except Exception as ex:
            links = None
        try:
            quantity = el.find_element_by_class_name("b-offer__quantity").text
        except Exception as ex:
            quantity = None
        #Поиск на сайте Роскачества по части имени до запятой
        ros_all = search_ros(name.split(',')[0])
        linkros_list.append(ros_all[3])
        rateros_list.append(ros_all[1])
        priceros_list.append(ros_all[2])
        nameros_list.append(ros_all[0])

        shop_list.append(shop)
        name_list.append(name)
        price_low.append(process_price(price)[0])
        if len(process_price(price)) > 1:
            price_high.append(process_price(price)[1])
        else:
            price_high.append(None)
        discount_list.append(discount)

        try:
            dates_end_list.append(dates_end)
            quantity_list.append(quantity)
            links_list.append(links)
        except Exception as ex:
            print('___'*10, ex)


    data = pd.DataFrame({"Название": name_list,
                         "Цена со скидкой": price_low,
                         "Цена без скидки": price_high,
                         "Цена Роскачество": priceros_list,
                         "Рейтинг Роскачество": rateros_list,
                         "Магазин": shop_list,
                         "Скидка": discount_list,
                         "Дата окончания": dates_end_list,
                         "кол-во/за кг": quantity_list,
                         "ссылка": links_list,
                         "ссылка Роскачество": linkros_list,
                         "Дата запроса": datetime.date.today()
                         })
    # wd.save_screenshot("ss.png")
    return data

rez_list = []

# request_list = ["Творог", "Пельмени", "Помидоры", "Молоко", "Перец", "Мороженное на сливках"]

with open("Список_покупок.txt", "r", encoding="utf-8") as list_open:
    request_list = list_open.read().split(',')
city = 'Железногорск'
set_city(city)
# добавление колонки с поиском для сортировки
for i in request_list:
    rez = search_edadil(i)
    rez['Запрос'] = i
    rez_list.append(rez)

wd.close()
ros.close()
#соединение df
a = pd.concat([i for i in rez_list], ignore_index=True) # .loc[:5]
# pd.set_option('display.max_columns', None)
# pd.set_option('display.max_rows', None)
print(a)
#запись в файл
date = datetime.date.today()
a.to_csv(f'data/{city}_data_{datetime.date.today()}.csv')

def save_in_google_drive():
    pp = pprint.PrettyPrinter(indent=4)
    SCOPES = ['https://www.googleapis.com/auth/drive']
    SERVICE_ACCOUNT_FILE = 'driveproject-324903-d1bc00376bc0.json'
    credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES)

    service = build('drive', 'v3', credentials=credentials)

    results = service.files().list(pageSize=10,
                               fields="nextPageToken, files(id, name, mimeType)").execute()
    # pp.pprint(results)
    folder_id = '1zrNZFS70ctSYYhSd4BtO6HulY6apRNX_'
    name = f'{city}_data_{datetime.date.today()}.csv'
    file_path = f'data/{city}_data_{datetime.date.today()}.csv'
    file_metadata = {
                    'name': name,
                    'parents': [folder_id]
                }
    media = MediaFileUpload(file_path, resumable=True)
    r = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    # pp.pprint(r)

save_in_google_drive()

# search("Молоко ВКУСНОТЕЕВО")

# data = pd.read_csv('data/data_2021-09-01.csv')
# name_search = []
# for i in data['Название']:
#     p = i.split(',')
#     search_ros(p[0])
# wd.close()

# print(name_list, )